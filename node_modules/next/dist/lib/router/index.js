'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = exports.createRouter = undefined;

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _router2 = require('./router');

var _router3 = _interopRequireDefault(_router2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// holds the actual router instance
var router = null;

var SingletonRouter = {};

// Create public properties and methods of the router in the SingletonRouter
var propertyFields = ['components', 'pathname', 'route', 'query'];
var methodFields = ['push', 'replace', 'reload', 'back'];

propertyFields.forEach(function (field) {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  (0, _defineProperty2.default)(SingletonRouter, field, {
    get: function get() {
      throwIfNoRouter();
      return router[field];
    }
  });
});

methodFields.forEach(function (field) {
  SingletonRouter[field] = function () {
    var _router;

    throwIfNoRouter();
    return (_router = router)[field].apply(_router, arguments);
  };
});

function throwIfNoRouter() {
  if (!router) {
    var message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }
}

// Export the SingletonRouter and this is the public API.
exports.default = SingletonRouter;

// INTERNAL APIS
// -------------
// (do not use following exports inside the app)

// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.

var createRouter = exports.createRouter = function createRouter() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  router = new (Function.prototype.bind.apply(_router3.default, [null].concat(args)))();
  return router;
};

// Export the actual Router class, which is usually used inside the server
var Router = exports.Router = _router3.default;